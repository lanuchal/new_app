{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { ThemeProvider, Button, Input, Image, Text } from \"react-native-elements\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport axios from \"axios\";\nimport { api } from \"../../api\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport Notification from \"./Notifications\";\nimport PageOrder from \"./PageOrder\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar kk;\n\nfunction MyStack(_ref) {\n  var itemId = _ref.itemId,\n      select_nav = _ref.select_nav,\n      navigation = _ref.navigation,\n      randomX = _ref.randomX;\n  useEffect(function () {\n    function randomIntFromInterval() {\n      return Math.floor(Math.random() * (100000000 - 1 + 1) + 1);\n    }\n\n    kk = randomIntFromInterval();\n    console.log(\"randomX = stck \" + kk);\n  }, [randomX]);\n  return _jsxs(Stack.Navigator, {\n    initialRouteName: \"Notification\",\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: \"#339933\"\n      },\n      headerTintColor: \"#fff\",\n      headerTitleStyle: {\n        fontWeight: \"bold\"\n      }\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"Notification\",\n      initialParams: {\n        itemId: itemId\n      },\n      component: Notification,\n      options: {\n        title: \"Notification\",\n        headerShown: false\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"PageOrder\",\n      initialParams: {\n        itemId: itemId,\n        randomX: kk\n      },\n      component: PageOrder,\n      options: {\n        title: \"PageOrder\",\n        headerShown: false\n      }\n    })]\n  });\n}\n\nvar randomX;\n\nvar OrderPage = function OrderPage(_ref2) {\n  var route = _ref2.route,\n      navigation = _ref2.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isload = _useState2[0],\n      setisload = _useState2[1];\n\n  useEffect(function () {\n    setTimeout(function () {\n      setisload(false);\n    }, 500);\n  }, []);\n  useEffect(function () {\n    function randomIntFromInterval() {\n      return Math.floor(Math.random() * (100000000 - 1 + 1) + 1);\n    }\n\n    randomX = randomIntFromInterval();\n  }, [route]);\n  var itemId = route.params.itemId;\n  return _jsx(NavigationContainer, {\n    independent: true,\n    children: _jsx(MyStack, {\n      itemId: itemId,\n      randomX: randomX\n    })\n  });\n};\n\nexport default OrderPage;","map":{"version":3,"sources":["C:/Users/ANUCHA/Desktop/api-cm-vjtb/app-cm-vgtb/vgtb-app/screens/order/OrderPage.js"],"names":["React","useState","useEffect","ThemeProvider","Button","Input","Image","Text","Icon","axios","api","NavigationContainer","createNativeStackNavigator","Notification","PageOrder","Stack","kk","MyStack","itemId","select_nav","navigation","randomX","randomIntFromInterval","Math","floor","random","console","log","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","fontWeight","title","headerShown","OrderPage","route","isload","setisload","setTimeout","params"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  ScrollView,\r\n  TextInput,\r\n  View,\r\n  Alert,\r\n  ActivityIndicator,\r\n} from \"react-native\";\r\nimport {\r\n  ThemeProvider,\r\n  Button,\r\n  Input,\r\n  Image,\r\n  Text,\r\n} from \"react-native-elements\";\r\nimport Icon from \"react-native-vector-icons/FontAwesome\";\r\nimport axios from \"axios\";\r\nimport { api } from \"../../api\";\r\n\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\n\r\n// import Product from \"./Product\";\r\n// import Type from \"./Type\";\r\nimport Notification from \"./Notifications\";\r\nimport PageOrder from \"./PageOrder\";\r\n\r\nconst Stack = createNativeStackNavigator();\r\nvar kk;\r\nfunction MyStack({ itemId, select_nav, navigation, randomX }) {\r\n  useEffect(() => {\r\n    function randomIntFromInterval() {\r\n      return Math.floor(Math.random() * (100000000 - 1 + 1) + 1);\r\n    }\r\n    kk = randomIntFromInterval();\r\n    console.log(\"randomX = stck \" + kk);\r\n  }, [randomX]);\r\n\r\n  return (\r\n    <Stack.Navigator\r\n      initialRouteName=\"Notification\"\r\n      screenOptions={{\r\n        headerStyle: {\r\n          backgroundColor: \"#339933\",\r\n        },\r\n        headerTintColor: \"#fff\",\r\n        headerTitleStyle: {\r\n          fontWeight: \"bold\",\r\n        },\r\n      }}\r\n    >\r\n      <Stack.Screen\r\n        name=\"Notification\"\r\n        initialParams={{ itemId: itemId }}\r\n        component={Notification}\r\n        options={{\r\n          title: \"Notification\",\r\n          headerShown: false,\r\n        }}\r\n      />\r\n      <Stack.Screen\r\n        name=\"PageOrder\"\r\n        initialParams={{ itemId: itemId, randomX: kk }}\r\n        component={PageOrder}\r\n        options={{ title: \"PageOrder\", headerShown: false }}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n\r\nvar randomX;\r\nconst OrderPage = ({ route, navigation }) => {\r\n  const [isload, setisload] = useState(true);\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setisload(false);\r\n    }, 500);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function randomIntFromInterval() {\r\n      return Math.floor(Math.random() * (100000000 - 1 + 1) + 1);\r\n    }\r\n    randomX = randomIntFromInterval();\r\n  }, [route]);\r\n  //   console.log(randomX);\r\n  const { itemId } = route.params;\r\n  return (\r\n    <NavigationContainer independent={true}>\r\n      <MyStack itemId={itemId} randomX={randomX} />\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nexport default OrderPage;\r\n"]},"metadata":{},"sourceType":"module"}